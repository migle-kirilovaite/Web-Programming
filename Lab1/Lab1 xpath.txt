1.
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Name/ancestor::Yarn
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/descendant::Stock
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Name/following-sibling::Price
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Stock/preceding-sibling::Name
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Name/following::Stock
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Stock/preceding::Name
/Items/Fiber/Yarn[@type='cotton']/Manufacturer[@brand='YarnArt']/Item/Stock/attribute::color
2. ?????????????
//Item[Price = //Item[1]/Price]
3. ?????????????
count(//text()[normalize-space()])
sum(//Price)
<a><b>2</b><c>3</c></a> sum(//*) 23 (iš elemento <a>) + 2 (iš elemento <b>) + 3 (iš elemento <c>) = 28
4.
//Item[Price < 3.00]
//Item[Name='YarnArt Jeans']
//tools:Item[tools:Price/@currency = //Fiber/Yarn/Manufacturer/Item/Price/@currency]
//Item[Name='YarnArt Jeans']/Price + //Item[Name='Gazzal Baby Cotton']/Price
5. ?????????????
//Fiber/Yarn/descendant::Manufacturer[@brand='YarnArt']/child::Item[Price='1.80']/Name
6.
//Item[Price = '1.80']
//Item[Price != '1.80']
1. aibę ir skaičių, XPath converts each node in the set to a number. If any node converts to a number that satisfies the comparison, the result is true.
2. aibę ir eilutę,  XPath converts each node in the set to a string. If any node converts to a string that satisfies the comparison, the result is true.
3. aibę ir loginę reikšmę, XPath converts each node in the set to a boolean. If any node converts to a boolean that satisfies the comparison, the result is true.
4. dvi aibes, XPath compares each node in the first set to each node in the second set. If any pair of nodes satisfies the comparison, the result is true.
7.
//Yarn[@type='cotton']/Manufacturer/Item/Price < //Yarn[@type='Wool']/Manufacturer/Item/Price
